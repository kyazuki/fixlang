module Main;

and : Bool -> Bool -> Bool;
and = \lhs -> \rhs -> if lhs then rhs else false;

/*
Eq trait is defined in standard library as follows: 

trait a: Eq {
    eq: a -> a -> Bool
}

Expression `x == y` is equivalent to `Eq.eq x y`.
*/

type Pair a b = struct (fst: a, snd: b);

impl [a: Eq, b: Eq] Pair a b : Eq {
    eq = \lhs -> \rhs -> (
        (lhs.get_fst == rhs.get_fst).and (lhs.get_snd == rhs.get_snd)
    );
}

search : [a: Eq] a -> Array a -> Int;
search = \elem -> \arr -> loop 0 \idx -> (
    if idx == arr.len then break -1
    else if arr.get idx == elem then break idx
    else continue (idx + 1)
);

main : Int;
main = (
    let arr = Array.new 4 $ Pair.new 0 false;
    let arr = arr.set 0 $ Pair.new 0 false;
    let arr = arr.set 1 $ Pair.new 0 true;
    let arr = arr.set 2 $ Pair.new 1 false;
    let arr = arr.set 3 $ Pair.new 1 true;
    arr.search $ Pair.new 1 false // evaluates to 2
);