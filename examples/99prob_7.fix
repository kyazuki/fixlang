/*
https://wiki.haskell.org/99_questions/1_to_10

Problem 7
(**) Flatten a nested list structure.
*/

module Main;

impl [a : ToString] Iterator a : ToString {
    to_string = |iter| (
        "[" + iter.map(to_string).join(", ") + "]"
    );
}

type NestedList a = union { elem : a, list: Iterator (NestedList a) };

flatten : NestedList a -> Iterator a;
flatten = |nl| (
    if nl.is_elem {
        let e = nl.as_elem;
        Iterator::empty.push_front(e)
    } else {
        let list = nl.as_list;
        list.map(flatten).flatten
    }
);

mk_elem : a -> NestedList a;
mk_elem = NestedList::elem;

mk_list : Array (NestedList a) -> NestedList a;
mk_list = |arr| NestedList::list(Iterator::from_array(arr));

main : IO ();
main =  do {
    let nl = NestedList::elem(5);
    let _ = *println(nl.flatten.to_string);

    let nl = mk_list([mk_elem(1), mk_list([mk_elem(2), mk_list([mk_elem(3), mk_elem(4)]), mk_elem(5)])]);
    let _ = *println(nl.flatten.to_string);
    
    let nl: NestedList I64  = mk_list([]);
    let _ = *println(nl.flatten.to_string);

    pure()
};