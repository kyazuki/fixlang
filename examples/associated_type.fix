module Main;
import Debug;

// A trait for collection-like types.
trait c : Collects {
    // Associated type definition.
    // Here, we define a type function `Elem` which accepts any type implememting `Collects` and returns a type.
    // When implementing `Collects` trait for a type `c`, you need to specify the value (which is a type) `Elem c`.
    type Elem c;
    // You can use `Elem c` in trait method definitions.
    empty : Elem c;
    insert : Elem c -> c -> c;
    to_iter : c -> Iterator (Elem c);
}

// Implementing `Collects` for arrays.
impl Array a : Collects {
    type Elem (Array a) = a;
    empty = [];
    insert = |x, xs| xs.push_back(x);
    to_iter = |xs| Array::to_iter(xs);
}

// Implementing `Collects` for iterators.
impl Iterator a : Collects {
    type Elem (Iterator a) = a;
    empty = Iterator::empty;
    insert = |x, xs| xs.push_front(x);
    to_iter = |xs| xs;
}

// Takes to collections of the same element type and 
extend : [c1 : Collects, c2 : Collects, Elem c1 = Elem c2] c1 -> c2 -> c2;
extend = |xs, ys| xs.to_iter.fold(ys, |ys, x| ys.insert(x));

stringify : [c : Collects, Elem c : ToString] c -> String;
stringify = |xs| xs.to_iter.map(to_string).join(", ");

main : IO ();
main = (
    eval assert_eq(|_|"", [].insert(1).insert(2).insert(3), [1, 2, 3]);
    eval assert_eq(|_|"", Iterator::empty.insert(3).insert(2).insert(1).to_array, [1, 2, 3]);
    eval assert_eq(|_|"", [1, 2, 3].extend([4, 5, 6]), [1, 2, 3, 4, 5, 6]);
    eval assert_eq(|_|"", [1, 2, 3].extend([4, 5, 6].Collects::to_iter), [1, 2, 3, 4, 5, 6]);
    eval assert_eq(|_|"", [1, 2, 3].Collects::to_iter.extend([4, 5, 6]).to_array, [6, 5, 4, 1, 2, 3]);
    eval assert_eq(|_|"", [1, 2, 3].Collects::to_iter.extend([4, 5, 6].Collects::to_iter).to_array, [6, 5, 4, 1, 2, 3]);
    eval assert_eq(|_|"", [1, 2, 3].has_equal_elements1([1, 2, 3]), true);
    eval assert_eq(|_|"", [1, 2, 3].has_equal_elements2([4, 5, 6]), false);
    eval assert_eq(|_|"", [1, 2, 3].stringify, "1, 2, 3");
    pure()
);