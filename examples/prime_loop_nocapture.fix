module Main;

is_prime : Int -> Array Bool;
is_prime = |n| (
    let arr = Array.new(n, true);
    let arr = arr.set!(0, false);
    let arr = arr.set!(1, false);
    loop((2, arr, n), |(i, arr, n)|
        if i*i > n { break $ arr };
        let next_arr = (
            if !arr.get(i) { arr };
            loop((i+i, arr, n, i), |(q, arr, n, i)|
                if n-1 < q { break $ arr };
                continue $ (q+i, arr.set!(q, false), n, i)
            )
        );
        continue $ (i+1, next_arr, n)
    )
);

// Count the appearance of a value in an array.
count : [a: Eq] a -> Array a -> Int;
count = |elem, arr| (
    loop((0, 0, arr, elem), |(i, sum, arr, elem)|
        if arr.get_length == i { break $ sum };
        let sum = sum + (if arr.get(i) == elem {1} else {0});
        continue $ (i+1, sum, arr, elem)
    )
);

main : IOState -> ((), IOState);
main = println! $ is_prime(10000000).count(true).to_string; // 664579
