module Main;

// A Trait is a set of types. 
// A trait is defined by a set of "methods" to be implemented by each member of it.

// `Greeter` is a set of types, where...
trait a : Greeter {
    // whose member has a method `greeting` that converts a value of type `a` into a greeting message greeting.
    greeting : a -> String;
}

// Let `I64` belong to the trait `MyToString`, where 
impl I64 : Greeter {
    // the `greeting` method is defined as follows.
    greeting = |n| "Hi! I'm a 64-bit integer " + n.to_string + "!";
}

/*
Traits are used for overloading operators.
For example, `Eq` trait is defined in standard library as follows: 

```
trait a : Eq {
    eq : a -> a -> Bool
}
```

Each expression `x == y` is a syntax suger for `Eq::eq(x, y)`.
*/

// As another example, 
type Pair a b = struct { fst: a, snd: b };

// In the trait implementation, you can specify constraints on type variables in `[]` bracket after `impl`.
impl [a : Eq, b : Eq] Pair a b : Eq {
    eq = |lhs, rhs| (
        lhs.@fst == rhs.@fst && lhs.@snd == rhs.@snd
    );
}

// You can specify constraints on type variables in the `[]` bracket before a type signature.
search : [a : Eq] a -> Array a -> I64;
search = |elem, arr| loop(0, |idx|
    if idx == arr.get_size { break $ -1 };
    if arr.@(idx) == elem { break $ idx };
    continue $ (idx + 1)
);

// An example of defining higher-kinded trait.
// All type variable has kind `*` by default, and any kind of higher-kinded type variable need to be annoted explicitly.
trait [f : *->*] f : MyFunctor {
    mymap : (a -> b) -> f a -> f b;
}

// An example of implementing higher-kinded trait.
// `Array` is a type of kind `* -> *`, so matches to the kind of trait `MyFunctor`.
impl Array : MyFunctor {
    mymap = |f, arr| (
        Array::from_map(arr.get_size, |idx| f(arr.@(idx)))
    );
}

main : IO ();
main = (
    let arr = Array::from_map(6, |x| x); // arr = [0,1,2,...,9].
    let arr = arr.mymap(|x| Pair { fst: x % 2, snd: x % 3 }); // arr = [(0, 0), (1, 1), (0, 2), ...].
    let x = arr.search(Pair { fst: 1, snd: 2}); // 5, the first number x such that x % 2 == 1 and x % 3 == 2.
    println $ x.greeting // This should print "Hi! I'm a 64-bit integer 5!".
);