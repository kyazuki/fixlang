; ModuleID = 'main'
source_filename = "main"

@int_placefolder = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1
@release_error_msg = private unnamed_addr constant [45 x i8] c"Release object whose refcnt is already %lld\0A\00", align 1

define void @empty_destructor(i64* %0) {
entry:
  ret void
}

declare i32 @printf(i8*, ...)

define void @print_int_obj({ { i64, void (i64*)* }, i64 }* %0) {
entry:
  %int_field_ptr = getelementptr inbounds { { i64, void (i64*)* }, i64 }, { { i64, void (i64*)* }, i64 }* %0, i32 0, i32 1
  %int_val = load i64, i64* %int_field_ptr, align 4
  %call_print_int = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @int_placefolder, i32 0, i32 0), i64 %int_val)
  ret void
}

define void @retain_obj(i64* %0) {
entry:
  %refcnt = load i64, i64* %0, align 4
  %refcnt1 = add i64 %refcnt, 1
  store i64 %refcnt1, i64* %0, align 4
  ret void
}

define void @release_obj(i64* %0) {
entry:
  %refcnt = load i64, i64* getelementptr inbounds ({ i64, void (i64*)* }, { i64, void (i64*)* }* bitcast (i64* %0 to { i64, void (i64*)* }*), i32 0, i32 0), align 4
  %is_refcnt_positive = icmp ule i64 %refcnt, 0
  br i1 %is_refcnt_positive, label %error_refcnt_already_leq_zero, label %refcnt_positive

error_refcnt_already_leq_zero:                    ; preds = %entry
  %print_error_in_release = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @release_error_msg, i32 0, i32 0), i64 %refcnt)
  unreachable

refcnt_positive:                                  ; preds = %entry
  %refcnt1 = sub i64 %refcnt, 1
  %is_refcnt_zero = icmp eq i64 %refcnt1, 0
  br i1 %is_refcnt_zero, label %refcnt_zero_after_release, label %end

refcnt_zero_after_release:                        ; preds = %refcnt_positive
  %ptr_to_dtor = load void (i64*)*, void (i64*)** getelementptr inbounds ({ i64, void (i64*)* }, { i64, void (i64*)* }* bitcast (i64* %0 to { i64, void (i64*)* }*), i32 0, i32 1), align 8
  call void %ptr_to_dtor(i64* %0)
  %1 = bitcast i64* getelementptr inbounds ({ i64, void (i64*)* }, { i64, void (i64*)* }* bitcast (i64* %0 to { i64, void (i64*)* }*), i32 0, i32 0) to i8*
  tail call void @free(i8* %1)
  br label %end

end:                                              ; preds = %refcnt_zero_after_release, %refcnt_positive
  ret void
}

declare void @free(i8*)

define i32 @main() {
entry:
  %malloccall = tail call i8* @malloc(i32 ptrtoint ({ { i64, void (i64*)* }, i64 }* getelementptr ({ { i64, void (i64*)* }, i64 }, { { i64, void (i64*)* }, i64 }* null, i32 1) to i32))
  %ptr_to_obj = bitcast i8* %malloccall to { { i64, void (i64*)* }, i64 }*
  %ptr_to_control_block = getelementptr inbounds { { i64, void (i64*)* }, i64 }, { { i64, void (i64*)* }, i64 }* %ptr_to_obj, i32 0, i32 0
  %ptr_to_refcnt = getelementptr inbounds { i64, void (i64*)* }, { i64, void (i64*)* }* %ptr_to_control_block, i32 0, i32 0
  store i64 1, i64* %ptr_to_refcnt, align 4
  %ptr_to_dtor_field = getelementptr inbounds { i64, void (i64*)* }, { i64, void (i64*)* }* %ptr_to_control_block, i32 0, i32 1
  store void (i64*)* @dtor, void (i64*)** %ptr_to_dtor_field, align 8
  %ptr_to_field = getelementptr inbounds { { i64, void (i64*)* }, i64 }, { { i64, void (i64*)* }, i64 }* %ptr_to_obj, i32 0, i32 1
  store i64 42, i64* %ptr_to_field, align 4
  call void @retain_obj({ { i64, void (i64*)* }, i64 }* %ptr_to_obj)
  call void @release_obj({ { i64, void (i64*)* }, i64 }* %ptr_to_obj)
  call void @retain_obj({ { i64, void (i64*)* }, i64 }* %ptr_to_obj)
  call void @release_obj({ { i64, void (i64*)* }, i64 }* %ptr_to_obj)
  %ptr_to_field1 = getelementptr inbounds { { i64, void (i64*)* }, i64 }, { { i64, void (i64*)* }, i64 }* %ptr_to_obj, i32 0, i32 1
  %field_value = load i64, i64* %ptr_to_field1, align 4
  ret i64 %field_value
}

declare noalias i8* @malloc(i32)

define void @dtor(i64* %0) {
entry:
  ret void
}

  %ptr_to_dtor_field5 = getelementptr inbounds { i64, void (i64*)* }, { i64, void (i64*)* }* %ptr_to_control_block3, i32 0, i32 1
  store void (i64*)* @dtor, void (i64*)** %ptr_to_dtor_field5, align 8
  %ptr_to_field6 = getelementptr inbounds { { i64, void (i64*)* }, i64 }, { { i64, void (i64*)* }, i64 }* %ptr_to_obj2, i32 0, i32 1
  store i64 42, i64* %ptr_to_field6, align 4
  call void @retain_obj({ { i64, void (i64*)* }, i64 }* %ptr_to_obj2)
  call void @release_obj({ { i64, void (i64*)* }, i64 }* %ptr_to_obj2)
  call void @release_obj({ { i64, void (i64*)* }, i64 }* %ptr_to_obj)
  %ptr_to_field7 = getelementptr inbounds { { i64, void (i64*)* }, i64 }, { { i64, void (i64*)* }, i64 }* %ptr_to_obj2, i32 0, i32 1
  %field_value = load i64, i64* %ptr_to_field7, align 4
  ret i64 %field_value
}

declare noalias i8* @malloc(i32)

define void @dtor(i64* %0) {
entry:
  ret void
}
