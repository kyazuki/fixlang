module AsyncTask;
// This module provides a way to run a computation asynchronously.
// To use this module, pass `--threaded` flag to the compiler.

// A type for a task that can be run asynchronously.
type Task a = unbox struct { dtor : Destructor Ptr };

// Make a task for a computation.
make : (() -> a) -> Task a;
make = |func| (
    let task_data = _unsafe_make_task_data(func);
    let task_handle = CALL_C[Ptr fixruntime_threadpool_create_task(Ptr), task_data];
    let dtor = Destructor::make(task_handle, |task_handle| (
        eval CALL_C[() fixruntime_threadpool_delete_task(Ptr), task_handle];
        ()
    ));
    Task { dtor : dtor }
);

// Get the result of a computation task.
get : Task a -> a;
get = |task| (
    let task_handle = task.@dtor.@value; // Since we do not want to call the destructor here, we evaluate `task` later.
    eval CALL_C[() fixruntime_threadpool_wait_task(Ptr), task_handle];
    let task_data = CALL_C[Ptr fixruntime_threadpool_get_data(Ptr), task_handle];
    let res = _unsafe_extract_task_result(task_data);
    eval task;
    res
);