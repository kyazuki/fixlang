module Debug;
// Collection of functions for debugging.
// This module contains fucntions violating purity, e.g., printing string to stdio without IO monad.

// Prints a string to the specified stream and flushes the stream.
_debug_print_to_stream : IOHandle -> String -> ();
_debug_print_to_stream = |hdl, msg| (
    msg.borrow_c_str(|str| (
        let hdl = hdl.@_file_ptr;
        let _ = CALL_C[I32 fprintf(Ptr, Ptr, ...), hdl, str];
        let _ = CALL_C[I32 fflush(Ptr), hdl];
        ()
    ))
);

// Asserts that a condition (boolean value) is true.
// If the assertion failed, prints a message to the stderr and aborts.
assert : Lazy String -> Bool -> ();
assert = |msg, b| (
    if !b {
        let u = debug_eprint("assertion failed!: ");
        let u = debug_eprintln(msg());
        abort()
    } else {
        ()
    }
);

// Asserts that two values are equal.
// If the assertion failed, prints a message to the stderr and aborts.
assert_eq : [a: Eq] Lazy String -> a -> a -> ();
assert_eq = |msg, lhs, rhs| assert(msg, lhs == rhs);

// Asserts that the given value is unique, and returns the given value.
// If the assertion failed, prints a message to the stderr and aborts.
// The main use of this function is to check whether a boxed value given as an argument is unique.
assert_unique! : Lazy String -> a -> a;
assert_unique! = |msg, x| (
    let (unique, x) = x.unsafe_is_unique;
    let _ = assert(msg, unique);
    x
);

// Get clocks (cpu time) elapsed while executing a function.
consumed_time_while : (a -> b) -> a -> (b, F64);
consumed_time_while = |f, x| (
    let s = CALL_C[I64 fixruntime_clock()];
    let r = f(x);
    let t = CALL_C[I64 fixruntime_clock()];
    let t = CALL_C[F64 fixruntime_clocks_to_sec(I64), t - s];
    (r, t)
);

// Get clocks (cpu time) elapsed while executing an I/O action.
consumed_time_while_io : IO a -> IO (a, F64);
consumed_time_while_io = |io| (
    IO { _data : |_| (
        let s = CALL_C[I64 fixruntime_clock()];
        let r = io._unsafe_perform;
        let t = CALL_C[I64 fixruntime_clock()];
        let t = CALL_C[F64 fixruntime_clocks_to_sec(I64), t - s];
        (r, t)
    )}
);

// Get clocks (cpu time) elapsed while executing a function that takes a unit as an argument.
consumed_time_while_void : (() -> a) -> (a, F64);
consumed_time_while_void = |f| consumed_time_while(f, ());

// Prints a string to stderr and flushes.
debug_eprint : String -> ();
debug_eprint = |msg| _debug_print_to_stream(stderr, msg);

// Prints a string followed by a newline to stderr and flushes.
debug_eprintln : String -> ();
debug_eprintln = |msg| debug_eprint(msg + "\n");

// Prints a string to stdout and flushes.
debug_print : String -> ();
debug_print = |msg| _debug_print_to_stream(stdout, msg);

// Prints a string followed by a newline to stdout and flushes.
debug_println : String -> ();
debug_println = |msg| debug_print(msg + "\n");