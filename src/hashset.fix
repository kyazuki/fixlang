module HashSet;

import HashMap;
import Hash;

type HashSet k = unbox struct { _hashmap : HashMap k () };

// Check whether a hashset contains an element.
contains : [k : Eq, k : Hash] k -> HashSet k -> Bool;
contains = |key, set| set.@_hashmap.contains_key(key);

// Create an empty HashSet which is reserved so that it will not rehash until size exceeds the spacified value.
empty : I64 -> HashSet k;
empty = |max_size| (
    HashSet { _hashmap : HashMap::empty(max_size) }
);

// Erase an element from a HashSet. 
erase : [k : Eq, k : Hash] k -> HashSet k -> HashSet k;
erase = |key, set| set.mod__hashmap(HashMap::erase(key));

// Get capacity of a HashSet. 
get_capacity : HashSet k -> I64;
get_capacity = |set| set.@_hashmap.get_capacity;

// Get size (number of elements) of a HashSet.
get_size : HashSet k -> I64;
get_size = |set| set.@_hashmap.get_size;

// Insert an element into a HashSet.
insert : [k : Eq, k : Hash] k -> HashSet k -> HashSet k;
insert = |key, set| set.mod__hashmap(HashMap::insert(key, ()));

// Reserve a HashSet so that it will not rehash until size exceeds the spacified value.
reserve : [k : Hash, k : Eq] I64 -> HashSet k -> HashSet k;
reserve = |max_size, set| set.mod__hashmap(HashMap::reserve(max_size));

// Convert a HashSet into an iterator.
to_iter : HashSet k -> Iterator k;
to_iter = |set| set.@_hashmap.to_iter.map(|(key, _)| key);