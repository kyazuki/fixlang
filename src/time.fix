module Time;

// The type that represents time by the number of seconds and micro seconds elapsed since the unix epoch.
// This struct has two fields, `sec: I64` and `microsec: U32`.
type Time = unbox struct { sec : I64, microsec : U32 };

// The type to represent date and time.
type DateTime = unbox struct {
    microsec : U32, // [0-99999]
    sec : U8, // [0-61]
    min : U8, // [0-59]
    hour : U8, // [0-23]
    day_in_month : U8, // [1-31]
    month : U8, // [1-12]
    day_in_week : U8, // [0: Sun, ..., 6: Sat]
    day_in_year : U32, // [1-366] TODO: we will change this to U16 in a future.
    year : I32,
    is_dst : Option Bool // Whether or not this datetime is under daylight saving time. `none` implies unknown/unspecified.
};

// Convert datetime to time.
// `_datetime_to_time_inner(false)` treats the argument as UTC datetime, and `_datetime_to_time_inner(true)` treats the argument as local datetime.
// Note that "local time" depends on timezone, so this function is violating purity.
_datetime_to_time_inner : Bool -> DateTime -> Result ErrMsg Time; 
_datetime_to_time_inner = |is_local, dt| (
    let buf = [
        dt.@sec.to_I64, 
        dt.@min.to_I64, 
        dt.@hour.to_I64, 
        dt.@day_in_month.to_I64, 
        dt.@month.to_I64 - 1, 
        dt.@year.to_I64 - 1900, 
        dt.@day_in_week.to_I64 - 1, 
        dt.@day_in_year.to_I64,
        if is_local {
            if dt.@is_dst.is_some {
                if dt.@is_dst.as_some { 1 } else { 0 }
            } else {
                -1
            }
        } else {
            0
        }
    ];
    let sec = buf.borrow_ptr(|ptr| CALL_C[I64 fixruntime_timegmlocal(U8, Ptr), if is_local { 1_U8 } else { 0_U8 }, ptr]);
    if sec == -1 {
        Result::err $ ErrMsg::make $ "Some error (maybe overflow) occurred."
    } else {
        Result::ok $ Time { sec : sec, microsec : dt.@microsec }
    }
);

// Convert time to datetime. 
// `_time_to_datetime_inner(false)` returns utc datetime, and `_time_to_datetime_inner(true)` returns local datetime.
// Note that "local time" depends on timezone, so this function is violating purity.
_time_to_datetime_inner : Bool -> Time -> Result ErrMsg DateTime;
_time_to_datetime_inner = |is_local, Time {sec: s, microsec : ms}| (
    let buf : Array I64 = Array::empty(10)._unsafe_set_size(10); // sec, min, hour, mday, mon, year(-1900), wday, yday, isdst, is_error.
    let _ = CALL_C[() fixruntime_gmlocaltime(U8, I64, Ptr), if is_local { 1_U8 } else { 0_U8 }, s, buf._get_ptr];
    if buf.@(8) == 1 {
        Result::err $ ErrMsg::make $ "Some error (maybe overflow) occurred."
    } else {
        Result::ok $ DateTime {
            microsec : ms,
            sec : buf.@(0).to_U8,
            min : buf.@(1).to_U8,
            hour : buf.@(2).to_U8,
            day_in_month : buf.@(3).to_U8,
            month : (buf.@(4) + 1).to_U8,
            year : (buf.@(5) + 1900).to_I32,
            day_in_week : buf.@(6).to_U8,
            day_in_year : (buf.@(7) + 1).to_U32,
            is_dst : (
                let v = buf.@(8);
                if v < 0 { Option::none() } else { Option::some(v > 0) }
            )
        }
    }
);

// Convert local datetime to time.
// This function depends on timezone, so it returns `IOResult` value.
from_local : DateTime -> IOResult ErrMsg Time;
from_local = |dt| IOResult::from_result $ _datetime_to_time_inner(true, dt);

// Convert UTC datetime to time.
from_utc : DateTime -> Result ErrMsg Time;
from_utc = _datetime_to_time_inner(false);

// Get current time.
get_now : IO Time;
get_now = (
    let buf: Array I64 = Array::empty(2)._unsafe_set_size(2); // sec, usec.
    let _ = CALL_C[() fixruntime_gettimeofday(Ptr), buf._get_ptr];
    pure $ Time { sec : buf.@(0), microsec : buf.@(1).to_U32 }
);

// Convert time to 64-bit floating value.
to_F64 : Time -> F64;
to_F64 = |Time { sec : s, microsec : ms }| s.to_F64 + ms.to_F64 * 1.0e-6;

// Convert time to local time.
// This function depends on timezone, so it returns `IOResult` value.
to_local : Time -> IOResult ErrMsg DateTime;
to_local = |t| IOResult::from_result $ _time_to_datetime_inner(true, t);

// Convert time to UTC datetime.
to_utc : Time -> Result ErrMsg DateTime;
to_utc = _time_to_datetime_inner(false);
